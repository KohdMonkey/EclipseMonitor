// Copyright 2022 Tuan Tran
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

#include <gtest/gtest.h>
#include <string>

#include <EclipseMonitor/Eth/Abi/AbiParamParser.hpp>

namespace EclipseMonitor_Test
{
	extern size_t g_numOfTestFile;
}

using namespace EclipseMonitor_Test;
using namespace EclipseMonitor::Eth::Abi;


GTEST_TEST(TestEthAbiParamParser, CountTestFile)
{
	static auto tmp = ++g_numOfTestFile;
	(void)tmp;
}

GTEST_TEST(TestEthAbiParamParser, SimpleParseInt)
{
	std::string funcSig = "function foo(uint64 num) public";
	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x45U
	};

	AbiParamParser paramParser =
		AbiParamParser::ParseParams(funcSig, input, true);

	auto& params = paramParser.GetParams();

	AbiParamType* paramTypeObj = params[0]->GetAbiParamType().get();
	SimpleObjects::Object& paramInput = params[0]->GetInput();

	AbiParamType expectedParamType(
		ParamType::Uint64,
		true,
		false
	);

	SimpleObjects::Object numBytes = SimpleObjects::Bytes {
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x45U
	};

	SimpleObjects::UInt64 num(69);

	EXPECT_EQ(paramTypeObj->GetType(), expectedParamType.GetType());
	EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamType.IsStatic());
	EXPECT_EQ(paramTypeObj->IsArray(), expectedParamType.IsArray());
	EXPECT_EQ(paramInput, num);
}

GTEST_TEST(TestEthAbiInputParser, MixTest)
{
	std::string funcSig =
		"function bar(uint64[] nums, bytes32 fooBytes) public";

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x44U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x03U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x07U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x11U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x0aU
	};

	AbiParamParser paramParser =
		AbiParamParser::ParseParams(funcSig, input, true);
	auto& params = paramParser.GetParams();

	AbiParamType expectedParamTypes[2] = {
		AbiParamType(ParamType::Uint64, false, true),
		AbiParamType(ParamType::Bytes32, true, false)
	};

	SimpleObjects::List expectedInput = {
		SimpleObjects::List({
			SimpleObjects::UInt64(7),
			SimpleObjects::UInt64(17),
			SimpleObjects::UInt64(10)
		}),
		SimpleObjects::Bytes({
			0x48U, 0x65U, 0x6cU, 0x6cU, 0x6fU, 0x2cU, 0x20U, 0x77U,
			0x6fU, 0x72U, 0x6cU, 0x64U, 0x21U, 0x00U, 0x00U, 0x00U,
			0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
			0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U
		})
	};

	for (uint i = 0; i < params.size(); i++)
	{
		AbiParamType *paramTypeObj = params[i]->GetAbiParamType().get();
		SimpleObjects::Object& paramInput = params[i]->GetInput();

		EXPECT_EQ(paramTypeObj->GetType(), expectedParamTypes[i].GetType());
		EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamTypes[i].IsStatic());
		EXPECT_EQ(paramTypeObj->IsArray(), expectedParamTypes[i].IsArray());
		EXPECT_EQ(paramInput, expectedInput[i]);
	}
}
