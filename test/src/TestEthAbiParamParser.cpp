// Copyright 2022 Tuan Tran
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

#include <gtest/gtest.h>
#include <string>

#include <EclipseMonitor/Eth/Abi/AbiParam.hpp>
#include <EclipseMonitor/Eth/Abi/AbiParamParser.hpp>
#include <EclipseMonitor/Eth/Abi/AbiInputParser.hpp>


namespace EclipseMonitor_Test
{
	extern size_t g_numOfTestFile;
}

using namespace EclipseMonitor_Test;
using namespace EclipseMonitor::Eth::Abi;


GTEST_TEST(TestEthAbiParamParser, CountTestFile)
{
	static auto tmp = ++g_numOfTestFile;
	(void)tmp;
}

GTEST_TEST(TestEthAbiParamParser, SimpleParseInt)
{
	std::string funcSig = "function foo(uint64 num) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x45U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType* paramTypeObj = params[0]->GetAbiParamType().get();
	SimpleObjects::Object& paramInput = params[0]->GetInput();

	AbiParamType expectedParamType(
		ParamType::Uint64,
		true,
		false
	);

	SimpleObjects::Object numBytes = SimpleObjects::Bytes {
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x45U
	};

	SimpleObjects::UInt64 num(69);

	EXPECT_EQ(paramTypeObj->GetType(), expectedParamType.GetType());
	EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamType.IsStatic());
	EXPECT_EQ(paramTypeObj->IsArray(), expectedParamType.IsArray());
	EXPECT_EQ(paramInput, num);
}

GTEST_TEST(TestEthAbiParamParser, SimpleParseBool)
{
	std::string funcSig = "function bar(bool isFoo) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType *paramTypeObj = params[0]->GetAbiParamType().get();
	SimpleObjects::Object& paramInput = params[0]->GetInput();

	AbiParamType expectedParamType(
		ParamType::Bool,
		true,
		false
	);

	SimpleObjects::Bool isFoo(true);

	EXPECT_EQ(paramTypeObj->GetType(), expectedParamType.GetType());
	EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamType.IsStatic());
	EXPECT_EQ(paramTypeObj->IsArray(), expectedParamType.IsArray());
	EXPECT_EQ(paramInput, isFoo);
}

GTEST_TEST(TestEthAbiParamParser, SimpleParseBytes32)
{
	std::string funcSig = "function bar(bytes32 fooBytes) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType *paramTypeObj = params[0]->GetAbiParamType().get();
	SimpleObjects::Object& paramInput = params[0]->GetInput();

	AbiParamType expectedParamType(
		ParamType::Bytes32,
		true,
		false
	);

	SimpleObjects::Bytes fooBytes = {
		0x48U, 0x65U, 0x6cU, 0x6cU, 0x6fU, 0x2cU, 0x20U, 0x77U,
		0x6fU, 0x72U, 0x6cU, 0x64U, 0x21U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U
	};

	EXPECT_EQ(paramTypeObj->GetType(), expectedParamType.GetType());
	EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamType.IsStatic());
	EXPECT_EQ(paramTypeObj->IsArray(), expectedParamType.IsArray());
	EXPECT_EQ(paramInput, fooBytes);
}

GTEST_TEST(TestEthAbiParamParser, ArrayUintTest)
{
	std::string funcSig = "function bar(uint64[] nums) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x03U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x02U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x03U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType *paramTypeObj = params[0]->GetAbiParamType().get();
	SimpleObjects::Object& paramInput = params[0]->GetInput();

	AbiParamType expectedParamType(
		ParamType::Uint64,
		false,
		true
	);

	SimpleObjects::List expectedList = {
		SimpleObjects::UInt64(1),
		SimpleObjects::UInt64(2),
		SimpleObjects::UInt64(3)
	};

	EXPECT_EQ(paramTypeObj->GetType(), expectedParamType.GetType());
	EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamType.IsStatic());
	EXPECT_EQ(paramTypeObj->IsArray(), expectedParamType.IsArray());
	EXPECT_EQ(paramInput, expectedList);
}

GTEST_TEST(TestEthAbiParamParser, ArrayBoolTest)
{
	std::string funcSig = "function bar(bool[] isFoo) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x03U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType *paramTypeObj = params[0]->GetAbiParamType().get();
	SimpleObjects::Object& paramInput = params[0]->GetInput();

	AbiParamType expectedParamType(
		ParamType::Bool,
		false,
		true
	);

	SimpleObjects::List expectedList = {
		SimpleObjects::Bool(true),
		SimpleObjects::Bool(false),
		SimpleObjects::Bool(true)
	};

	EXPECT_EQ(paramTypeObj->GetType(), expectedParamType.GetType());
	EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamType.IsStatic());
	EXPECT_EQ(paramTypeObj->IsArray(), expectedParamType.IsArray());
	EXPECT_EQ(paramInput, expectedList);
}

GTEST_TEST(TestEthAbiParamParser, BytesTest1)
{
	std::string funcSig = "function bar(bytes fooBytes) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType *paramTypeObj = params[0]->GetAbiParamType().get();
	SimpleObjects::Object& paramInput = params[0]->GetInput();

	AbiParamType expectedParamType(
		ParamType::Bytes,
		false,
		false
	);

	SimpleObjects::Bytes expectedBytes = {
		0x48U, 0x65U, 0x6cU, 0x6cU,	0x6fU, 0x2cU, 0x20U, 0x77U,
		0x6fU, 0x72U, 0x6cU, 0x64U,	0x21U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U
	};

	EXPECT_EQ(paramTypeObj->GetType(), expectedParamType.GetType());
	EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamType.IsStatic());
	EXPECT_EQ(paramTypeObj->IsArray(), expectedParamType.IsArray());
	EXPECT_EQ(paramInput, expectedBytes);
}

GTEST_TEST(TestEthAbiParamParser, BytesTest2)
{
	std::string funcSig = "function bar(bytes fooBytes) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x40U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x48U,
		0x65U, 0x6cU, 0x6cU, 0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU,
		0x72U, 0x6cU, 0x64U, 0x21U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType *paramTypeObj = params[0]->GetAbiParamType().get();
	SimpleObjects::Object& paramInput = params[0]->GetInput();

	AbiParamType expectedParamType(
		ParamType::Bytes,
		false,
		false
	);

	SimpleObjects::Bytes expectedBytes = {
		0x48U, 0x65U, 0x6cU, 0x6cU, 0x6fU, 0x2cU, 0x20U, 0x77U,
		0x6fU, 0x72U, 0x6cU, 0x64U,	0x21U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x48U, 0x65U, 0x6cU, 0x6cU,	0x6fU, 0x2cU, 0x20U, 0x77U,
		0x6fU, 0x72U, 0x6cU, 0x64U,	0x21U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x48U,	0x65U, 0x6cU, 0x6cU, 0x6fU,
		0x2cU, 0x20U, 0x77U, 0x6fU,	0x72U, 0x6cU, 0x64U, 0x21U
	};

	EXPECT_EQ(paramTypeObj->GetType(), expectedParamType.GetType());
	EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamType.IsStatic());
	EXPECT_EQ(paramTypeObj->IsArray(), expectedParamType.IsArray());
	EXPECT_EQ(paramInput, expectedBytes);
}

GTEST_TEST(TestEthAbiParamParser, BytesTest3)
{
	std::string funcSig = "function bar(bytes fooBytes) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x4aU, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x48U,
		0x65U, 0x6cU, 0x6cU, 0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU,
		0x72U, 0x6cU, 0x64U, 0x21U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType *paramTypeObj = params[0]->GetAbiParamType().get();
	SimpleObjects::Object& paramInput = params[0]->GetInput();

	AbiParamType expectedParamType(
		ParamType::Bytes,
		false,
		false
	);

	SimpleObjects::Bytes expectedBytes = {
		0x48U, 0x65U, 0x6cU, 0x6cU,	0x6fU, 0x2cU, 0x20U, 0x77U,
		0x6fU, 0x72U, 0x6cU, 0x64U,	0x21U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x48U, 0x65U, 0x6cU, 0x6cU,	0x6fU, 0x2cU, 0x20U, 0x77U,
		0x6fU, 0x72U, 0x6cU, 0x64U,	0x21U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x48U,	0x65U, 0x6cU, 0x6cU, 0x6fU,
		0x2cU, 0x20U, 0x77U, 0x6fU,	0x72U, 0x6cU, 0x64U, 0x21U,
		0x48U, 0x65U, 0x6cU, 0x6cU,	0x6fU, 0x2cU, 0x20U, 0x77U,
		0x6fU, 0x72U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U
	};


	EXPECT_EQ(paramTypeObj->GetType(), expectedParamType.GetType());
	EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamType.IsStatic());
	EXPECT_EQ(paramTypeObj->IsArray(), expectedParamType.IsArray());
	EXPECT_EQ(paramInput, expectedBytes);
}

GTEST_TEST(TestEthAbiParamParser, MixTest1)
{
	std::string funcSig = "function bar(uint64 num, bool isFoo) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x45U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType expectedParamTypes[2] = {
		AbiParamType(ParamType::Uint64, true, false),
		AbiParamType(ParamType::Bool, true, false)
	};

	SimpleObjects::List expectedInput = {
		SimpleObjects::UInt64(69),
		SimpleObjects::Bool(true)
	};

	for (uint i = 0; i < params.size(); i++)
	{
		AbiParamType *paramTypeObj = params[i]->GetAbiParamType().get();
		SimpleObjects::Object& paramInput = params[i]->GetInput();

		EXPECT_EQ(paramTypeObj->GetType(), expectedParamTypes[i].GetType());
		EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamTypes[i].IsStatic());
		EXPECT_EQ(paramTypeObj->IsArray(), expectedParamTypes[i].IsArray());
		EXPECT_EQ(paramInput, expectedInput[i]);
	}
}

GTEST_TEST(TestEthAbiParamParser, MixTest2)
{
	std::string funcSig = "function bar(uint64 num, bool isFoo, bytes32 fooBytes) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x45U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType expectedParamTypes[3] = {
		AbiParamType(ParamType::Uint64, true, false),
		AbiParamType(ParamType::Bool, true, false),
		AbiParamType(ParamType::Bytes32, true, false)
	};

	SimpleObjects::List expectedInput = {
		SimpleObjects::UInt64(69),
		SimpleObjects::Bool(true),
		SimpleObjects::Bytes({
			0x48U, 0x65U, 0x6cU, 0x6cU,	0x6fU, 0x2cU, 0x20U, 0x77U,
			0x6fU, 0x72U, 0x6cU, 0x64U,	0x21U, 0x00U, 0x00U, 0x00U,
			0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
			0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U
		})
	};

	for (uint i = 0; i < params.size(); i++)
	{
		AbiParamType *paramTypeObj = params[i]->GetAbiParamType().get();
		SimpleObjects::Object& paramInput = params[i]->GetInput();

		EXPECT_EQ(paramTypeObj->GetType(), expectedParamTypes[i].GetType());
		EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamTypes[i].IsStatic());
		EXPECT_EQ(paramTypeObj->IsArray(), expectedParamTypes[i].IsArray());
		EXPECT_EQ(paramInput, expectedInput[i]);
	}

}

GTEST_TEST(TestEthAbiParamParser, MixTest3)
{
	std::string funcSig = "function bar(bool isFoo, bytes32 fooBytes, uint64 num) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x45U
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType expectedParamTypes[3] = {
		AbiParamType(ParamType::Bool, true, false),
		AbiParamType(ParamType::Bytes32, true, false),
		AbiParamType(ParamType::Uint64, true, false)
	};

	SimpleObjects::List expectedInput = {
		SimpleObjects::Bool(true),
		SimpleObjects::Bytes({
			0x48U, 0x65U, 0x6cU, 0x6cU,	0x6fU, 0x2cU, 0x20U, 0x77U,
			0x6fU, 0x72U, 0x6cU, 0x64U,	0x21U, 0x00U, 0x00U, 0x00U,
			0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U,
			0x00U, 0x00U, 0x00U, 0x00U,	0x00U, 0x00U, 0x00U, 0x00U
		}),
		SimpleObjects::UInt64(69)
	};

	for (uint i = 0; i < params.size(); i++)
	{
		AbiParamType *paramTypeObj = params[i]->GetAbiParamType().get();
		SimpleObjects::Object& paramInput = params[i]->GetInput();

		EXPECT_EQ(paramTypeObj->GetType(), expectedParamTypes[i].GetType());
		EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamTypes[i].IsStatic());
		EXPECT_EQ(paramTypeObj->IsArray(), expectedParamTypes[i].IsArray());
		EXPECT_EQ(paramInput, expectedInput[i]);
	}
}

GTEST_TEST(TestEthAbiParamParser, MixTest4)
{
	std::string funcSig = "function bar(uint64[] nums, bytes32 fooBytes) public";
	auto paramTypes = AbiParamType::ParseParamType(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x44U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x03U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x07U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x11U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x0aU
	};

	auto params = AbiInputParser::ParseInput(std::move(paramTypes), input);

	AbiParamType expectedParamTypes[2] = {
		AbiParamType(ParamType::Uint64, false, true),
		AbiParamType(ParamType::Bytes32, true, false)
	};

	SimpleObjects::List expectedInput = {
		SimpleObjects::List({
			SimpleObjects::UInt64(7),
			SimpleObjects::UInt64(17),
			SimpleObjects::UInt64(10)
		}),
		SimpleObjects::Bytes({
			0x48U, 0x65U, 0x6cU, 0x6cU, 0x6fU, 0x2cU, 0x20U, 0x77U,
			0x6fU, 0x72U, 0x6cU, 0x64U, 0x21U, 0x00U, 0x00U, 0x00U,
			0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
			0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U
		})
	};

	for (uint i = 0; i < params.size(); i++)
	{
		AbiParamType *paramTypeObj = params[i]->GetAbiParamType().get();
		SimpleObjects::Object& paramInput = params[i]->GetInput();

		EXPECT_EQ(paramTypeObj->GetType(), expectedParamTypes[i].GetType());
		EXPECT_EQ(paramTypeObj->IsStatic(), expectedParamTypes[i].IsStatic());
		EXPECT_EQ(paramTypeObj->IsArray(), expectedParamTypes[i].IsArray());
		EXPECT_EQ(paramInput, expectedInput[i]);
	}
}