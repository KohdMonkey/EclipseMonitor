// Copyright 2022 Tuan Tran
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

#include <gtest/gtest.h>
#include <string>

#include "EclipseMonitor/Eth/EventMgr.hpp"

#include "EthTransaction.hpp"
#include "EthReceipt.hpp"

namespace EclipseMonitor_Test
{
	extern size_t g_numOfTestFile;
}

using namespace EclipseMonitor_Test;
using namespace EclipseMonitor::Eth;

GTEST_TEST(TestEthEventMgr, CountTestFile)
{
	static auto tmp = ++g_numOfTestFile;
	(void)tmp;
}

GTEST_TEST(TestEthEventMgr, EventSubscriptionTest)
{
	EventMgr eventMgr;

	const SimpleObjects::Bytes& testTxn1 = TestTxn1();

	EXPECT_FALSE(eventMgr.WatchTxn(testTxn1));

	SimpleObjects::Bytes contractAddress1 = {
		0xe3U, 0x3bU, 0x30U, 0xcdU, 0xe1U, 0xaaU, 0xe0U, 0x64U,
		0x09U, 0xe8U, 0xaaU, 0xdfU, 0xa5U, 0xb5U, 0xfcU, 0xfcU,
		0x8dU, 0x8dU, 0xdaU, 0x7cU
	};
	std::string event1("Revoke(bytes32)");

	eventMgr.Subscribe(contractAddress1, event1);
	EXPECT_TRUE(eventMgr.WatchTxn(testTxn1));

	const SimpleObjects::Bytes& receiptBytes = TestReceipt1();

	bool eventEmitted;
	SimpleObjects::Bytes eventData;
	std::tie(eventEmitted, eventData) =
		eventMgr.IsEventEmitted(contractAddress1, receiptBytes);

	EXPECT_TRUE(eventEmitted);

	SimpleObjects::Bytes expectedEventData = {
		0x9fU, 0x8fU, 0x72U, 0xaaU, 0x93U, 0x04U, 0xc8U, 0xb5U,
		0x93U, 0xd5U, 0x55U, 0xf1U, 0x2eU, 0xf6U, 0x58U, 0x9cU,
		0xc3U, 0xa5U, 0x79U, 0xa2U, 0x9fU, 0x8fU, 0x72U, 0xaaU,
		0x93U, 0x04U, 0xc8U, 0xb5U, 0x93U, 0xd5U, 0x9fU, 0x8fU
	};

	EXPECT_EQ(expectedEventData, eventData);
}

GTEST_TEST(TestEthEventMgr, EventSubscriptionTest2)
{
	EventMgr eventMgr;

	const SimpleObjects::Bytes& testTxn2 = TestTxn2();

	EXPECT_FALSE(eventMgr.WatchTxn(testTxn2));

	SimpleObjects::Bytes contractAddress2 = {
		0x4cU, 0x66U, 0x08U, 0xcdU, 0xe7U, 0x5eU, 0x62U, 0x20U,
		0x82U, 0x8eU, 0x3fU, 0x37U, 0x61U, 0x66U, 0x3bU, 0xdbU,
		0x86U, 0x05U, 0x38U, 0xe6U
	};
	std::string event2("Revoke(bytes32,uint64,bool)");

	eventMgr.Subscribe(contractAddress2, event2);
	EXPECT_TRUE(eventMgr.WatchTxn(testTxn2));

	const SimpleObjects::Bytes& receiptBytes = TestReceipt2();

	bool eventEmitted;
	SimpleObjects::Bytes eventData;
	std::tie(eventEmitted, eventData) =
		eventMgr.IsEventEmitted(contractAddress2, receiptBytes);

	EXPECT_TRUE(eventEmitted);

	SimpleObjects::Bytes expectedEventData = {
		0x9f, 0x8f, 0x72, 0xaa, 0x93, 0x04, 0xc8, 0xb5,
		0x93, 0xd5, 0x55, 0xf1, 0x2e, 0xf6, 0x58, 0x9c,
		0xc3, 0xa5, 0x79, 0xa2, 0x9f, 0x8f, 0x72, 0xaa,
		0x93, 0x04, 0xc8, 0xb5, 0x93, 0xd5, 0x9f, 0x8f,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x39,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	EXPECT_EQ(expectedEventData, eventData);
}

GTEST_TEST(TestEthEventMgr, EventSubscriptionTest3)
{
	EventMgr eventMgr;
	const SimpleObjects::Bytes& testTxn3 = TestTxn3();

	EXPECT_FALSE(eventMgr.WatchTxn(testTxn3));

	SimpleObjects::Bytes contractAddress3 = {
		0x51U, 0x3aU, 0xafU, 0xe1U, 0x14U, 0x37U, 0x20U, 0x77U,
		0x19U, 0x45U, 0xbcU, 0x3aU, 0x43U, 0x0dU, 0x7fU, 0x41U,
		0x71U, 0xf2U, 0xd2U, 0x48U
	};
	std::string event3("Revoke(bytes[])");

	eventMgr.Subscribe(contractAddress3, event3);
	EXPECT_TRUE(eventMgr.WatchTxn(testTxn3));

	const SimpleObjects::Bytes& receiptBytes = TestReceipt3();

	bool eventEmitted;
	SimpleObjects::Bytes eventData;
	std::tie(eventEmitted, eventData) =
		eventMgr.IsEventEmitted(contractAddress3, receiptBytes);

	EXPECT_TRUE(eventEmitted);

	SimpleObjects::Bytes expectedEventData = {
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
		0x9f, 0x8f, 0x72, 0xaa, 0x93, 0x04, 0xc8, 0xb5,
		0x93, 0xd5, 0x55, 0xf1, 0x2e, 0xf6, 0x58, 0x9c,
		0xc3, 0xa5, 0x79, 0xa2, 0x9f, 0x8f, 0x72, 0xaa,
		0x93, 0x04, 0xc8, 0xb5, 0x93, 0xd5, 0x9f, 0x8f,
		0xde, 0xad, 0xbe, 0xaf, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24,
		0xca, 0xfe, 0xba, 0xbe, 0x9f, 0x8f, 0x72, 0xaa,
		0x93, 0x04, 0xc8, 0xb5, 0x93, 0xd5, 0x55, 0xf1,
		0x2e, 0xf6, 0x58, 0x9c, 0xc3, 0xa5, 0x79, 0xa2,
		0x9f, 0x8f, 0x72, 0xaa, 0x93, 0x04, 0xc8, 0xb5,
		0x93, 0xd5, 0x9f, 0x8f, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	EXPECT_EQ(eventData, expectedEventData);
}
