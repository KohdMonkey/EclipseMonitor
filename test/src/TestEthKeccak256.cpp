// Copyright (c) 2022 Haofan Zheng
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

#include <gtest/gtest.h>

#include <EclipseMonitor/EthKeccak256.hpp>

using namespace EclipseMonitor;

namespace EclipseMonitor_Test
{
	extern size_t g_numOfTestFile;
}

GTEST_TEST(TestEthKeccak256, CountTestFile)
{
	static auto tmp = ++EclipseMonitor_Test::g_numOfTestFile;
	(void)tmp;
}

GTEST_TEST(TestEthKeccak256, EmptyCalculation)
{
	std::vector<uint8_t> input;
	std::array<uint8_t, 32> expOut = {
		0xc5, 0xd2, 0x46, 0x01, 0x86, 0xf7, 0x23, 0x3c, 0x92, 0x7e,
		0x7d, 0xb2, 0xdc, 0xc7, 0x03, 0xc0, 0xe5, 0x00, 0xb6, 0x53,
		0xca, 0x82, 0x27, 0x3b, 0x7b, 0xfa, 0xd8, 0x04, 0x5d, 0x85,
		0xa4, 0x70
	};

	auto actOut = EthKeccak256(input);
	EXPECT_EQ(actOut, expOut);
}

GTEST_TEST(TestEthKeccak256, GenesisBlkCalculation)
{
	std::vector<uint8_t> input {
		// sizeSize: 2 bytes, size: 532, total: 1 + 2 + 532 = 535
		0XF9U, 0X02U, 0X14U,
			0XA0U, // ParentHash
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U,
			0XA0U, // Sha3Uncles
				0X1DU, 0XCCU, 0X4DU, 0XE8U, 0XDEU, 0XC7U, 0X5DU, 0X7AU, 0XABU, 0X85U,
				0XB5U, 0X67U, 0XB6U, 0XCCU, 0XD4U, 0X1AU, 0XD3U, 0X12U, 0X45U, 0X1BU,
				0X94U, 0X8AU, 0X74U, 0X13U, 0XF0U, 0XA1U, 0X42U, 0XFDU, 0X40U, 0XD4U,
				0X93U, 0X47U,
			0X94U, // Miner
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
			0XA0U, // StateRoot
				0XD7U, 0XF8U, 0X97U, 0X4FU, 0XB5U, 0XACU, 0X78U, 0XD9U, 0XACU, 0X09U,
				0X9BU, 0X9AU, 0XD5U, 0X01U, 0X8BU, 0XEDU, 0XC2U, 0XCEU, 0X0AU, 0X72U,
				0XDAU, 0XD1U, 0X82U, 0X7AU, 0X17U, 0X09U, 0XDAU, 0X30U, 0X58U, 0X0FU,
				0X05U, 0X44U,
			0XA0U, // TransactionsRoot
				0X56U, 0XE8U, 0X1FU, 0X17U, 0X1BU, 0XCCU, 0X55U, 0XA6U, 0XFFU, 0X83U,
				0X45U, 0XE6U, 0X92U, 0XC0U, 0XF8U, 0X6EU, 0X5BU, 0X48U, 0XE0U, 0X1BU,
				0X99U, 0X6CU, 0XADU, 0XC0U, 0X01U, 0X62U, 0X2FU, 0XB5U, 0XE3U, 0X63U,
				0XB4U, 0X21U,
			0XA0U, // ReceiptsRoot
				0X56U, 0XE8U, 0X1FU, 0X17U, 0X1BU, 0XCCU, 0X55U, 0XA6U, 0XFFU, 0X83U,
				0X45U, 0XE6U, 0X92U, 0XC0U, 0XF8U, 0X6EU, 0X5BU, 0X48U, 0XE0U, 0X1BU,
				0X99U, 0X6CU, 0XADU, 0XC0U, 0X01U, 0X62U, 0X2FU, 0XB5U, 0XE3U, 0X63U,
				0XB4U, 0X21U,
			0XB9U, 0X01U, 0X00U, // LogsBloom
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
			0X85U, // Difficulty
				0X04U, 0X00U, 0X00U, 0X00U, 0X00U,
			0X80U, // Number
			0X82U, // GasLimit
				0X13U, 0X88U,
			0X80U, // GasUsed
			0X80U, // Timestamp
			0XA0U, // ExtraData
				0X11U, 0XBBU, 0XE8U, 0XDBU, 0X4EU, 0X34U, 0X7BU, 0X4EU, 0X8CU, 0X93U,
				0X7CU, 0X1CU, 0X83U, 0X70U, 0XE4U, 0XB5U, 0XEDU, 0X33U, 0XADU, 0XB3U,
				0XDBU, 0X69U, 0XCBU, 0XDBU, 0X7AU, 0X38U, 0XE1U, 0XE5U, 0X0BU, 0X1BU,
				0X82U, 0XFAU,
			0XA0U, // MixHash
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U,
				0X00U, 0X00U,
			0X88U, // Nonce
				0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X00U, 0X42U,
	};
	std::array<uint8_t, 32> expOut = {
		0xd4, 0xe5, 0x67, 0x40, 0xf8, 0x76, 0xae, 0xf8, 0xc0, 0x10,
		0xb8, 0x6a, 0x40, 0xd5, 0xf5, 0x67, 0x45, 0xa1, 0x18, 0xd0,
		0x90, 0x6a, 0x34, 0xe6, 0x9a, 0xec, 0x8c, 0x0d, 0xb1, 0xcb,
		0x8f, 0xa3
	};

	auto actOut = EthKeccak256(input);
	EXPECT_EQ(actOut, expOut);
}
