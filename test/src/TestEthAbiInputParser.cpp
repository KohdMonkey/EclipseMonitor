// Copyright 2022 Tuan Tran
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

#include <gtest/gtest.h>

#include <string>
#include <EclipseMonitor/Eth/Abi/AbiParam.hpp>
#include <EclipseMonitor/Eth/Abi/AbiParamParser.hpp>
#include <EclipseMonitor/Eth/Abi/AbiInputParser.hpp>

namespace EclipseMonitor_Test
{
	extern size_t g_numOfTestFile;
}


using namespace EclipseMonitor_Test;
using namespace EclipseMonitor::Eth::Abi;

GTEST_TEST(TestEthAbiInputParser, CountTestFile)
{
	static auto tmp = ++g_numOfTestFile;
	(void)tmp;
}

GTEST_TEST(TestEthAbiInputParser, SimpleParseInt)
{
	std::string funcSig = "function foo(uint64 num) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x45U
	};

	AbiInputParser::ParseInput(params, input);
}

GTEST_TEST(TestEthAbiInputParser, SimpleParseBool)
{
	std::string funcSig = "function bar(bool isFoo) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U
	};

	AbiInputParser::ParseInput(params, input);
}

GTEST_TEST(TestEthAbiInputParser, SimpleParseBytes32)
{
	std::string funcSig = "function bar(bytes32 fooBytes) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U
	};

	AbiInputParser::ParseInput(params, input);
}


GTEST_TEST(TestEthAbiInputParser, ArrayUintTest)
{
	std::string funcSig = "function bar(uint64[] nums) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x03U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x02U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x03U
	};

	AbiInputParser::ParseInput(params, input);
}

GTEST_TEST(TestEthAbiInputParser, ArrayBoolTest)
{
	std::string funcSig = "function bar(bool[] isFoo) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x03U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U
	};

	AbiInputParser::ParseInput(params, input);
}

GTEST_TEST(TestEthAbiInputParser, MixTest1)
{
	std::string funcSig = "function bar(uint64 num, bool isFoo) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x45U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U
	};

	AbiInputParser::ParseInput(params, input);
}

GTEST_TEST(TestEthAbiInputParser, MixTest2)
{
	std::string funcSig = "function bar(uint64 num, bool isFoo, bytes32 fooBytes) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x45U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U
	};

	AbiInputParser::ParseInput(params, input);
}

GTEST_TEST(TestEthAbiInputParser, MixTest3)
{
	std::string funcSig = "function bar(bool isFoo, bytes32 fooBytes, uint64 num) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x01U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x45U
	};

	AbiInputParser::ParseInput(params, input);
}

GTEST_TEST(TestEthAbiInputParser, MixTest4)
{
	std::string funcSig = "function bar(uint64[] nums, bytes32 fooBytes) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x44U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x03U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x07U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x11U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x0aU
	};

	AbiInputParser::ParseInput(params, input);
}


GTEST_TEST(TestEthAbiInputParser, BytesTest1)
{
	std::string funcSig = "function bar(bytes fooBytes) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U
	};

	AbiInputParser::ParseInput(params, input);
}

GTEST_TEST(TestEthAbiInputParser, BytesTest2)
{
	std::string funcSig = "function bar(bytes fooBytes) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x40U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x48U,
		0x65U, 0x6cU, 0x6cU, 0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU,
		0x72U, 0x6cU, 0x64U, 0x21U
	};

	AbiInputParser::ParseInput(params, input);
}

GTEST_TEST(TestEthAbiInputParser, BytesTest3)
{
	std::string funcSig = "function bar(bytes fooBytes) public";
	auto params = AbiParamType::ParseParams(funcSig);

	SimpleObjects::Bytes input = {
		0xcaU, 0xfeU, 0xbaU, 0xbeU, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x20U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x4aU, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x6cU, 0x64U,
		0x21U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x48U,
		0x65U, 0x6cU, 0x6cU, 0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU,
		0x72U, 0x6cU, 0x64U, 0x21U, 0x48U, 0x65U, 0x6cU, 0x6cU,
		0x6fU, 0x2cU, 0x20U, 0x77U, 0x6fU, 0x72U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U, 0x00U,
		0x00U, 0x00U, 0x00U, 0x00U
	};

	AbiInputParser::ParseInput(params, input);
}